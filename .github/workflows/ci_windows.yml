name: MS Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_windows:
    strategy:
      matrix:
        ext: [Full, Limited]
        arch: [x64, Win32]
        lib: [Shared, Static]
        config: [Release, Debug]
      fail-fast: false

    runs-on: 'windows-latest'

    env:
      README: ${{ github.workspace }}/README.txt
      CONFIG: ${{ matrix.config == 'Debug' && 'Debug' || 'RelWithDebInfo' }}
      DXC_URL: 'https://github.com/microsoft/DirectXShaderCompiler/releases/download/v1.8.2505.1/dxc_2025_07_14.zip'
      DXC_ARCH: ${{ matrix.arch == 'Win32' && 'x86' || 'x64' }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Dependencies
      if: matrix.ext == 'Full'
      run: |
        echo "-------------- Install DirectXShaderCompiler (DXC) --------------"
        curl -s -L -o dxc.zip ${{ env.DXC_URL }}
        tar -xf dxc.zip
        echo "$PWD\bin\${{ env.DXC_ARCH }}" >> "$env:GITHUB_PATH"

    - name: Configure CMake
      run: >
        cmake -A "${{ matrix.arch }}" -S . -B ${{ github.workspace }}/${{ matrix.arch }}
        -DLLGL_BUILD_STATIC_LIB=${{ matrix.lib == 'Static' && 'ON' || 'OFF' }}
        -DLLGL_BUILD_RENDERER_OPENGL=ON
        -DLLGL_BUILD_RENDERER_DIRECT3D11=ON
        -DLLGL_BUILD_RENDERER_DIRECT3D12=ON
        -DLLGL_D3D12_ENABLE_DXCOMPILER=ON
        -DLLGL_BUILD_EXAMPLES=ON
        -DLLGL_BUILD_TESTS=ON
        -DLLGL_BUILD_WRAPPER_C99=ON
        -DLLGL_BUILD_WRAPPER_CSHARP=ON
        -DLLGL_VK_ENABLE_SPIRV_REFLECT=ON
        "-DLLGL_D3D11_ENABLE_FEATURELEVEL=${{ matrix.ext == 'Full' && 'Direct3D 11.3' || 'Direct3D 11.0' }}"
        "-DLLGL_D3D12_ENABLE_FEATURELEVEL=${{ matrix.ext == 'Full' && 'Direct3D 12.2' || 'Direct3D 12.0' }}"

    - name: Build
      run: |
        cmake --build ${{ github.workspace }}/${{ matrix.arch }} --config ${{ env.CONFIG }}
        echo "LLGL built with Visual Studio for ${{ matrix.arch }} on $(date)." > ${{ env.README }}
        echo "Place at root of LLGL repository to run examples and testbed." >> ${{ env.README }}

    - name: Upload Binaries
      uses: actions/upload-artifact@v4
      if: matrix.ext == 'Full' && matrix.lib == 'Shared' && matrix.config == 'Release'
      with:
        name: LLGL-Windows-${{ matrix.config }}-${{ matrix.arch == 'x64' && 'x86_64' || 'x86' }}
        path: |
          ${{ env.README }}
          ${{ github.workspace }}/${{ matrix.arch }}/build/${{ env.CONFIG }}/LLGL*.dll
          ${{ github.workspace }}/${{ matrix.arch }}/build/${{ env.CONFIG }}/Example_*.exe
          ${{ github.workspace }}/${{ matrix.arch }}/build/${{ env.CONFIG }}/Testbed*.exe
      
    - name: Testbed
      working-directory: tests/Testbed
      run: |
        ${{ github.workspace }}/${{ matrix.arch }}/build/${{ env.CONFIG }}/${{ matrix.config == 'Debug' && 'TestbedD' || 'Testbed' }}.exe d3d11 d3d12 -v -f -t -g ${{ matrix.config == 'Debug' && '-d=gpu' || '' }}

    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      if: always() && matrix.ext == 'Full' && matrix.arch == 'x64' && matrix.lib == 'Shared' && matrix.config == 'Release'
      with:
        name: LLGL-Win64-Test_Report
        path: |
          tests/Testbed/Output/Direct3D11/*.png
          tests/Testbed/Output/Direct3D11/Report.txt
          tests/Testbed/Output/Direct3D12/*.png
          tests/Testbed/Output/Direct3D12/Report.txt

